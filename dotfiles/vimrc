if !has('nvim')
  set encoding=utf-8
endif

nnoremap ; :

let mapleader='`'
" If fish it not there, use sh

if &shell =~# 'fish$'
  set shell=sh
endif

" Auto reload changed files
set autoread

" Quickly edit/reload the vimrc file
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Send more characters for redraws
set ttyfast

" Remove all useless messages like intro screen and use abbreviation like RO
" instead readonly and + instead modified
set shortmess=atI

" Show file name in window title
set title

" Mute error bell
set novisualbell

" Enable TrueColor support
set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

call plug#begin('~/.vim/plugged')

" using vim-plug
Plug 'mcchrish/nnn.vim'


" Code Completion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

"
Plug 'tpope/vim-sensible'

" HTML 5
Plug 'othree/html5.vim'

" CoffeeScript
Plug 'kchmck/vim-coffee-script'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'ngmy/vim-rubocop'

" JSON
let g:vim_json_syntax_conceal = 0
Plug 'elzr/vim-json'

" Typescrip
Plug 'leafgarland/typescript-vim'
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
Plug 'Shougo/vimproc.vim'
Plug 'Quramy/tsuquyomi'
"set ballooneval
autocmd FileType typescript setlocal completeopt+=menu,preview

"autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()

" Better JavaScript support
Plug 'pangloss/vim-javascript'

" ES 2016+ syntax
Plug 'othree/es.next.syntax.vim'

" JSX support
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0

" Slim
Plug 'slim-template/vim-slim'

" CSS
Plug 'JulesWang/css.vim'

" Stylus
Plug 'wavded/vim-stylus'

" Jade
Plug 'digitaltoad/vim-jade'

" Go
Plug 'fatih/vim-go'

" Markdown
Plug 'jtratner/vim-flavored-markdown'
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Automatically add closing tags in html-like formats
Plug 'alvan/vim-closetag'
let g:closetag_filenames = "*.handlebars,*.html,*.xhtml,*.phtml"


"Snippets""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Track the engine.
"Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Snippet dir
"let g:UltiSnipsSnippetsDir = '~/.config/nvim/ultisnips/'

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" Highlights the matching HTML tag when the cursor
" is positioned on a tag.
Plug 'gregsexton/MatchTag'

"Search"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'gabesoft/vim-ags'
let g:ags_enable_async = 1
map <leader>// :Ags<space>
vmap <leader>/ y<esc>:Ags "<C-r>0"

" NERDTree
Plug 'scrooloose/nerdtree'
let NERDTreeHijackNetrw=1
hi NERDTreeDirSlash guifg=#c1b3b0
hi NERDTreeCWD guifg=#c1b3b0

" NERDTree binding
" map <leader> <C-t> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1
nmap <silent> <leader>f :NERDTreeFind<CR>
map <F9> :NERDTreeToggle<cr>

let g:NERDTreeChDirMode       = 2


" Autocompletition""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --all' }
let tern#is_show_argument_hints_enabled=1

Plug 'ternjs/tern_for_vim'
let tern#is_show_argument_hints_enabled=1

"VCS""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'

Plug 'Xuyuanp/nerdtree-git-plugin'

" Diffs
Plug 'mhinz/vim-signify'
let g:signify_disable_by_default=0
let g:signify_vcs_list = ['git']
let g:signify_sign_weight = 'NONE'

let g:signify_sign_color_ctermbg = 231
let g:signify_sign_color_ctermfg_add = 70
let g:signify_sign_color_ctermfg_delete = 160
let g:signify_sign_color_ctermfg_change = 100

let g:signify_sign_add = '+'
let g:signify_sign_delete = '⎵'
let g:signify_sign_change = '⁓'
let g:signify_sign_change_delete = '±'
let g:signify_sign_delete_first_line = '⎴'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easymotion
Plug 'Lokaltog/vim-easymotion'

" Zoom
Plug 'troydm/zoomwintab.vim'
map <leader>z :ZoomWinTabToggle<cr>

" Root dir
Plug 'airblade/vim-rooter'

" Brackets pair
Plug 'jiangmiao/auto-pairs'
let g:AutoPairsMapCh = 0

" Clipboard
"Plug 'tpope/vim-endwise'
map <leader>p "+p
map <leader>y "+y
nmap <leader>y "+y
Plug 'kana/vim-fakeclip'
Plug 'sickill/vim-pasta'

set rtp+=/usr/local/opt/fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
let g:fzf_launcher = "In_a_new_term_function %s"

" CtrlP """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" ctrlp.vim and plugins
"Plug 'ctrlpvim/ctrlp.vim'
"let g:ctrlp_working_path_mode = 'rw'
"let g:ctrlp_root_markers = ['.editorconfig']
"Plug 'mattn/ctrlp-mark'
"Plug 'jasoncodes/ctrlp-modified.vim'
"let g:ctrlp_working_path_mode = 0

"let g:ctrlp_custom_ignore = '\v[\/]\.(node_modules|bower_components)$'

" cmatch

"Plug 'JazzCore/ctrlp-cmatcher'
"let g:ctrlp_match_func = {'match' : 'matcher#cmatch'}
" Moar files
"let g:ctrlp_max_files = 20000

" Function navigation
"Plug 'tacahiroy/ctrlp-funky'

" Russian commands
"Plug 'powerman/vim-plugin-ruscmd'

" Prevent pollution
"map <leader>o :echo 'Wrong open command'<cr>
"map <leader>op :echo 'Wrong CtrlP command'<cr>
"map <leader>on :echo 'Wrong NERDTree command'<cr>

" CtrlP bindings
"map <leader>opp :CtrlP<cr>
"map <leader>opc :CtrlPCurFile<cr>
"map <leader>opb :CtrlPBuffer<cr>
"map <leader>opd :CtrlPDir<cr>
"map <leader>opl :CtrlPLine<cr>
"map <leader>opff :CtrlPChangeAll<cr>
"map <leader>opfb :CtrlPChange<cr>

" Seems like it ↓ doesn't work
"map <leader>opm :CtrlPModified<cr>

"Multiple cursors"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<c-n>'
let g:multi_cursor_prev_key='<space>'
let g:multi_cursor_skip_key='n'
let g:multi_cursor_quit_key='<Esc>'

Plug 'scrooloose/nerdcommenter'

Plug 'tpope/vim-surround'
Plug 'vim-scripts/ShowTrailingWhitespace'
Plug 'vim-scripts/DeleteTrailingWhitespace'

" Better selection
Plug 'gorkunov/smartpairs.vim'

"Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Group dependencies, vim-snippets depends on ultisnips
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

Plug 'editorconfig/editorconfig-vim'

" Linters
Plug 'benekastah/neomake'

"autocmd! BufWritePost,BufEnter * Neomake
"Plug 'yssl/QFEnter'

Plug 'scrooloose/syntastic'
let g:syntastic_enable_signs=1
"let g:syntastic_enable_signs=1
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" Merge
Plug 'tpope/vim-fugitive'
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>ga :Gcommit --amend<CR>
nnoremap <leader>gt :Gcommit -v -q %<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gl :silent! Glog<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<CR>
nnoremap <leader>gpl :Dispatch! git pull<CR>

" Colors
"Plug 'morhetz/gruvbox'
"set background=light
"set rtp+=~/.config/nvim/plugged/gruvbox
"let g:gruvbox_contrast_light='soft'
"let g:gruvbox_italic=1

Plug 'dracula/vim', { 'as': 'dracula' }

"set t_Co=256
set background=dark
colorscheme dracula

" higlight word under cursor
":autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))

" Map F12 to switch between light and dark
function! Switch_background()
  if &background == "light"
    set background=dark
  else
    set background=light
  endif
endfunction
map <F12> :call Switch_background()<CR>

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='dark'

" Set custom left separator
let g:airline_left_sep = ''
" Set custom right separator
let g:airline_right_sep = ''
" Enable airline for tab-bar
let g:airline#extensions#tabline#enabled = 1
" Don't display buffers in tab-bar with single tab
let g:airline#extensions#tabline#show_buffers = 0
" Display only filename in tab
let g:airline#extensions#tabline#fnamemod = ':t'
" Display current branch
let g:airline#extensions#branch#enabled = 1

" Turn-off fancy font & symbols
"let g:airline_powerline_fonts = 0

" Setup sections
let g:airline_section_b = ''
let g:airline_section_c = ''
let g:airline_section_x = ''
let g:airline_section_y = '%{getcwd()}'
let g:airline_section_z = '%t'
" Do not show filename in section a on focus lost
let g:airline_inactive_collapse=0

" Tooltip GUI
"Plug 'rhysd/nyaovim-popup-tooltip'

" Close buffers
Plug 'moll/vim-bbye'
:nnoremap <Leader>q :Bdelete<CR>

" Tabline
set showtabline=2
Plug 'mkitt/tabline.vim'

" Vertical line
Plug 'Yggdroot/indentLine'
let g:indentLine_color_term = 239

" Add plugins to &runtimepath
" Undo
Plug 'mbbill/undotree'
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10002        " number of lines to save for undo

" set show matching parenthes
"set showmatch

" Line numbers
set number
Plug 'myusuf3/numbers.vim'
let g:numbers_exclude = ['tagbar', 'nerdtree']

" Lost focus
Plug 'sjl/vitality.vim'
let g:vitality_always_assume_iterm = 1
au FocusLost * stopinsert

" Split navigation
Plug 't9md/vim-choosewin'
let g:choosewin_overlay_enable = 1
" Assign shortcut (split select)
nmap <leader>ss <Plug>(choosewin)

call plug#end()

" Run linter
call neomake#configure#automake('w')
" When writing a buffer (no delay), and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing (no delay).
call neomake#configure#automake('rw', 1000)
" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 1s; no delay when writing).
call neomake#configure#automake('nrwi', 500)

syntax on
set cursorline

noremap - $

" Disable arrow key for navigation
map  <up> <nop>
map  <down> <nop>
map  <left> <nop>
map  <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
cmap <up> <nop>
cmap <down> <nop>
cmap <left> <nop>
cmap <right> <nop>

" Navigation in insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l

" provide hjkl movements in Insert mode via the <Alt> modifier key
"noremap <A-h> <C-o>h
"inoremap <A-j> <C-o>j
"inoremap <A-k> <C-o>k
"inoremap <A-l> <C-o>l

" Buffer copy/cut
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Command mode navigation
cnoremap <C-f> <right>
cnoremap <C-b> <left>
cnoremap <C-a> <home>

" Change cursor
Plug 'jszakmeister/vim-togglecursor'
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Ignore dir's
set wildignore+=*/.idea/*
set wildignore+=*/public/assets/*
set wildignore+=*/tmp/*
set wildignore+=*/log/*
set wildignore+=*/node_modules/*
set wildignore+=*/bower_components/*

" More natural splits behaviour
set splitright
set splitbelow

" Scroll
set scrolloff=3

" Scrollbars
set guioptions-=L
set guioptions-=r
set guioptions-=T

" Fold/Unfold all
set foldmethod=syntax
"set foldmethod=indent
set foldlevel=20

"function! ToggleFold()
  "if &l:foldlevel == &l:foldnestmax
    "set foldlevel=1
  "else
    "let &l:foldlevel=&l:foldnestmax
  "endif
"endfunction

"nnoremap <Leader>z :call ToggleFold()<CR>

filetype plugin on
set omnifunc=syntaxcomplete#Complete

set spelllang=ru_yo,en_us

set nojoinspaces

" Indent
set autoindent

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Command autocompletition
set wildmenu
set wildmode=full

" Search
set hlsearch
vmap <Space> <esc>:nohlsearch<Bar>:echo<CR>
nmap <Space> :nohlsearch<Bar>:echo<CR>

"set incsearch
set ignorecase
set smartcase

map <c-s> :w<cr>
map <c-q> :q<cr>

let g:DeleteTrailingWhitespace_Action = 'delete'

" Don't wrap long lines
set nowrap

" Show quickfix window with full width
botright cwindow

set tabstop=2    " Tab eql 2 spaces
set shiftwidth=2 " Indent width
set expandtab    " Tab turns into spaces

set backspace=indent,eol,start

" Disable swap
set noswapfile

" Disable backups
set nowritebackup

" Open new tab
nmap <silent><leader>to :tabnew .<CR>

" Long lines move more natural
nnoremap j gj
nnoremap k gk

" Typos
command! Q q
command! Qall qall

command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

let g:ctrlsf_ackprg = 'ack'
map <leader>a :CtrlSF<space>

set laststatus=2 " Always display the statusline in all windows
set noshowmode   " Hide the default mode text (e.g. -- INSERT -- below the statusline)

"set gfn=Menlo:h14
set linespace=2

" escape insert mode immediately:
if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

let g:session_autosave = 'no'

au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal! g`\"" | endif

" Splits
map  <c-w>\| :vsp<CR>
map  <c-w>- :sp<cr>

map <leader>vv :set wrap<cr>
map <leader>vn :set nowrap<cr>

set synmaxcol=160 " Disable highlight after 160th column (makes vim faster)

" Show cursor line
"set cursorline
"hi CursorLine ctermfg=NONE ctermbg=236 cterm=NONE guifg=NONE guibg=#fbf1c7 gui=NONE

" Show EOL and tabs
set listchars=tab:⋅\ ,eol:⋅
set list
hi NonText ctermfg=NONE ctermbg=NONE cterm=NONE guifg=#c1b3b0 guibg=NONE gui=NONE
hi SpecialKey ctermfg=NONE ctermbg=NONE cterm=NONE guifg=#c1b3b0 guibg=NONE gui=NONE

let g:indentLine_color_gui = '#c1b3b0'
let g:indentLine_char = '⦙'

" columns limit 80
hi OverLength ctermfg=NONE ctermbg=NONE cterm=NONE guifg=#9b0411 guibg=NONE gui=NONE
match OverLength /\%81v.\+/
